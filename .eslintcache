[{"/Users/Stefi/Documents/CODING/React/meme-generator/src/index.js":"1","/Users/Stefi/Documents/CODING/React/meme-generator/src/reportWebVitals.js":"2","/Users/Stefi/Documents/CODING/React/meme-generator/src/App.js":"3","/Users/Stefi/Documents/CODING/React/meme-generator/src/components/Header.js":"4","/Users/Stefi/Documents/CODING/React/meme-generator/src/components/MemeGenerator.js":"5"},{"size":500,"mtime":1607593139165,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1607593139166,"results":"8","hashOfConfig":"7"},{"size":462,"mtime":1607597425743,"results":"9","hashOfConfig":"7"},{"size":295,"mtime":1607640902014,"results":"10","hashOfConfig":"7"},{"size":1865,"mtime":1607691645790,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"srjp2o",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},"/Users/Stefi/Documents/CODING/React/meme-generator/src/index.js",[],["25","26"],"/Users/Stefi/Documents/CODING/React/meme-generator/src/reportWebVitals.js",[],"/Users/Stefi/Documents/CODING/React/meme-generator/src/App.js",[],"/Users/Stefi/Documents/CODING/React/meme-generator/src/components/Header.js",[],"/Users/Stefi/Documents/CODING/React/meme-generator/src/components/MemeGenerator.js",["27"],"import React, {useState, useEffect} from \"react\"\n\nfunction MemeGenerator(){\n    const [ topText, setTopText] = useState(\"\") \n    const [ bottomText, setBottomText] = useState(\"\") \n    const [randomImg, setRandomImg] = useState(\"http://i.imgflip.com/1bij.jpg\")\n    const [allMemeImgs, setAllMemeImgs] = useState([])\n\n\n    useEffect(async () => {\n        \n    const url = `https://api.imgflip.com/get_memes`;\n    try {\n        const res = await fetch(url);\n        const response = await res.json();\n\n        setAllMemeImgs(response.data.memes);\n        } \n    catch (err) {\n                console.error(err);\n        }\n    }, []);\n\n    function handleSubmit(event){\n        event.preventDefault()\n\n        const randomNumber = getRandomInt(0, allMemeImgs.length)\n        function getRandomInt(max, min) {\n            return Math.floor(Math.random() * (max - min) + min); \n        }\n        setRandomImg(allMemeImgs[randomNumber].url)\n      \n    }\n  \n\n    return(\n        <>\n        <div>\n            <form className=\"meme-form\" onSubmit={handleSubmit}>\n                <input  type=\"text\"\n                        name=\"topText\"\n                        value={topText}\n                        onChange={event => {setTopText(event.target.value)}} />\n                        <br/>\n                <input  type =\"text\"\n                        name=\"bottomText\"\n                        value={bottomText}\n                        onChange={event => {setBottomText(event.target.value)}} />\n                <button>Generate Meme!</button>\n            </form>\n    \n            <div className=\"meme\">\n                <img class=\"image-center\" src={randomImg} alt=\"random meme\" />\n                <h2 className=\"top\">{topText}</h2>\n                <h2 className=\"bottom\">{bottomText}</h2>\n            </div>\n            </div>\n        </>\n    )\n}\n\nexport default MemeGenerator",["28","29"],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":10,"column":15,"nodeType":"36","endLine":22,"endColumn":6},{"ruleId":"30","replacedBy":"37"},{"ruleId":"32","replacedBy":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression",["39"],["40"],"no-global-assign","no-unsafe-negation"]