{"version":3,"sources":["images/meme.png","components/Header.js","components/MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","src","image","alt","MemeGenerator","useState","topText","setTopText","bottomText","setBottomText","randomImg","setRandomImg","allMemeImgs","setAllMemeImgs","useEffect","a","fetch","res","json","response","data","memes","console","error","className","onSubmit","event","preventDefault","max","min","randomNumber","length","Math","floor","random","url","type","name","value","onChange","target","class","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAAe,G,MAAA,IAA0B,kCCgB1BA,MAbf,WACI,OACI,mCACI,qBACIC,IAAKC,EACLC,IAAI,aAER,oD,8BCmDGC,MA3Df,WAAyB,IAAD,EACWC,mBAAS,IADpB,mBACZC,EADY,KACHC,EADG,OAEiBF,mBAAS,IAF1B,mBAEZG,EAFY,KAEAC,EAFA,OAGcJ,mBAAS,iCAHvB,mBAGbK,EAHa,KAGFC,EAHE,OAIkBN,mBAAS,IAJ3B,mBAIbO,EAJa,KAIAC,EAJA,KAiCpB,OA1BAC,oBAAS,sBAAC,8BAAAC,EAAA,kHAIYC,MAJZ,mDAIAC,EAJA,gBAKiBA,EAAIC,OALrB,OAKAC,EALA,OAONN,EAAeM,EAASC,KAAKC,OAPvB,kDAUNC,QAAQC,MAAR,MAVM,0DAYP,IAeC,mCACA,gCACI,uBAAMC,UAAU,YAAYC,SAfpC,SAAsBC,GAClBA,EAAMC,iBAEN,IACsBC,EAAKC,EADrBC,GACgBF,EADY,EACPC,EADUjB,EAAYmB,OAEtCC,KAAKC,MAAMD,KAAKE,UAAYN,EAAMC,GAAOA,IAEpDlB,EAAaC,EAAYkB,GAAcK,MAQnC,UACI,uBAAQC,KAAK,OACLC,KAAK,UACLC,MAAOhC,EACPiC,SAAU,SAAAb,GAAUnB,EAAWmB,EAAMc,OAAOF,UAC5C,uBACR,uBAAQF,KAAM,OACNC,KAAK,aACLC,MAAO9B,EACP+B,SAAU,SAAAb,GAAUjB,EAAciB,EAAMc,OAAOF,UACvD,uDAGJ,sBAAKd,UAAU,OAAf,UACI,qBAAKiB,MAAM,eAAexC,IAAKS,EAAWP,IAAI,gBAC9C,oBAAIqB,UAAU,MAAd,SAAqBlB,IACrB,oBAAIkB,UAAU,SAAd,SAAwBhB,aCnCzBkC,MATf,WACI,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCFOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.abdb7963.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/meme.d7cf5055.png\";","import React from 'react';\nimport image from \"../images/meme.png\"\n\nfunction Header() {\n    return(\n        <header>\n            <img \n                src={image} \n                alt=\"Problem?\"\n            />\n            <h1>Meme Generator</h1>\n        </header>\n\n    )\n}\n\nexport default Header;","import React, {useState, useEffect} from \"react\"\n\nfunction MemeGenerator(){\n    const [ topText, setTopText] = useState(\"\") \n    const [ bottomText, setBottomText] = useState(\"\") \n    const [randomImg, setRandomImg] = useState(\"http://i.imgflip.com/1bij.jpg\")\n    const [allMemeImgs, setAllMemeImgs] = useState([])\n\n\n    useEffect(async () => {\n        \n    const url = `https://api.imgflip.com/get_memes`;\n    try {\n        const res = await fetch(url);\n        const response = await res.json();\n\n        setAllMemeImgs(response.data.memes);\n        } \n    catch (err) {\n        console.error(err);\n        }\n    }, []);\n\n    function handleSubmit(event){\n        event.preventDefault()\n\n        const randomNumber = getRandomInt(0, allMemeImgs.length)\n        function getRandomInt(max, min) {\n            return Math.floor(Math.random() * (max - min) + min); \n        }\n        setRandomImg(allMemeImgs[randomNumber].url)\n      \n    }\n  \n\n    return(\n        <>\n        <div>\n            <form className=\"meme-form\" onSubmit={handleSubmit}>\n                <input  type=\"text\"\n                        name=\"topText\"\n                        value={topText}\n                        onChange={event => {setTopText(event.target.value)}} />\n                        <br/>\n                <input  type =\"text\"\n                        name=\"bottomText\"\n                        value={bottomText}\n                        onChange={event => {setBottomText(event.target.value)}} />\n                <button>Generate Meme!</button>\n            </form>\n    \n            <div className=\"meme\">\n                <img class=\"image-center\" src={randomImg} alt=\"random meme\" />\n                <h2 className=\"top\">{topText}</h2>\n                <h2 className=\"bottom\">{bottomText}</h2>\n            </div>\n            </div>\n        </>\n    )\n}\n\nexport default MemeGenerator","import React from \"react\"\nimport Header from \"./components/Header\"\nimport MemeGenerator from \"./components/MemeGenerator\"\n/**\n * Create 2 new components - Header and MemeGenerator\n * Header will only display things\n * MemeGenerator will be calling to an API and holding on to data\n * Each should be in their own file of the same name\n */\n\nfunction App() {\n    return (\n      <>\n        <Header />\n        <MemeGenerator />\n       </> \n    )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}